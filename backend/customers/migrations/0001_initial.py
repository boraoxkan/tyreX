# Generated by Django 5.2.4 on 2025-08-05 01:24

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Müşteri Adı')),
                ('customer_type', models.CharField(choices=[('individual', 'Bireysel Müşteri'), ('business', 'Kurumsal Müşteri'), ('fleet', 'Filo Müşterisi')], default='individual', max_length=20, verbose_name='Müşteri Türü')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-posta')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefon')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Adres')),
                ('company_name', models.CharField(blank=True, help_text='Kurumsal müşteriler için şirket adı', max_length=200, null=True, verbose_name='Şirket Adı')),
                ('tax_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Vergi Numarası')),
                ('customer_code', models.CharField(blank=True, help_text='Toptancının kendi sistemindeki müşteri kodu', max_length=50, null=True, verbose_name='Müşteri Kodu')),
                ('credit_limit', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Kredi Limiti')),
                ('payment_terms_days', models.PositiveIntegerField(default=30, verbose_name='Ödeme Vadesi (Gün)')),
                ('discount_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='İndirim Oranı (%)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif Müşteri')),
                ('is_vip', models.BooleanField(default=False, verbose_name='VIP Müşteri')),
                ('registration_date', models.DateField(auto_now_add=True, verbose_name='Kayıt Tarihi')),
                ('tire_hotel_enabled', models.BooleanField(default=False, help_text='Bu müşteri lastik oteli hizmetini kullanıyor mu?', verbose_name='Lastik Oteli Hizmeti')),
                ('tire_storage_capacity', models.PositiveIntegerField(blank=True, help_text='Maksimum depolanabilir lastik takım sayısı', null=True, verbose_name='Lastik Depolama Kapasitesi')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notlar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('wholesaler', models.ForeignKey(limit_choices_to={'company_type__in': ['wholesaler', 'both']}, on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='companies.company', verbose_name='Toptancı')),
            ],
            options={
                'verbose_name': 'Müşteri',
                'verbose_name_plural': 'Müşteriler',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_type', models.CharField(choices=[('purchase', 'Satın Alma'), ('tire_storage', 'Lastik Depolama'), ('tire_pickup', 'Lastik Teslim Alma'), ('maintenance', 'Bakım/Onarım'), ('consultation', 'Danışmanlık'), ('other', 'Diğer')], max_length=20, verbose_name='Ziyaret Türü')),
                ('visit_date', models.DateTimeField(auto_now_add=True, verbose_name='Ziyaret Tarihi')),
                ('description', models.TextField(help_text='Ziyaret sırasında yapılan işlemler', verbose_name='Açıklama')),
                ('sale_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Satış Tutarı')),
                ('is_completed', models.BooleanField(default=True, verbose_name='Tamamlandı')),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Süre (Dakika)')),
                ('customer_satisfaction', models.PositiveIntegerField(blank=True, help_text='1=Çok Kötü, 5=Mükemmel', null=True, verbose_name='Müşteri Memnuniyeti (1-5)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notlar')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visits', to='customers.customer', verbose_name='Müşteri')),
                ('served_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer_visits', to=settings.AUTH_USER_MODEL, verbose_name='Hizmet Veren Personel')),
            ],
            options={
                'verbose_name': 'Müşteri Ziyareti',
                'verbose_name_plural': 'Müşteri Ziyaretleri',
                'ordering': ['-visit_date'],
            },
        ),
        migrations.CreateModel(
            name='StoredTire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tire_brand', models.CharField(max_length=100, verbose_name='Lastik Markası')),
                ('tire_model', models.CharField(max_length=100, verbose_name='Lastik Modeli')),
                ('tire_size', models.CharField(help_text='Örn: 205/55R16', max_length=50, verbose_name='Lastik Ebadı')),
                ('tire_season', models.CharField(choices=[('summer', 'Yaz Lastiği'), ('winter', 'Kış Lastiği'), ('all_season', '4 Mevsim')], max_length=20, verbose_name='Mevsim Tipi')),
                ('quantity', models.PositiveIntegerField(default=4, help_text='Genellikle 4 adet (1 takım)', verbose_name='Adet')),
                ('has_rims', models.BooleanField(default=False, verbose_name='Jantlı')),
                ('rim_brand', models.CharField(blank=True, max_length=100, null=True, verbose_name='Jant Markası')),
                ('rim_size', models.CharField(blank=True, max_length=50, null=True, verbose_name='Jant Ebadı')),
                ('tire_condition', models.CharField(choices=[('excellent', 'Mükemmel'), ('good', 'İyi'), ('fair', 'Orta'), ('poor', 'Kötü'), ('damaged', 'Hasarlı')], default='good', max_length=20, verbose_name='Lastik Durumu')),
                ('production_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='Üretim Yılı')),
                ('storage_location', models.CharField(help_text='Depodaki konum (Raf: A1-B2 gibi)', max_length=100, verbose_name='Depolama Yeri')),
                ('storage_date', models.DateTimeField(auto_now_add=True, verbose_name='Depolama Tarihi')),
                ('planned_pickup_date', models.DateField(blank=True, null=True, verbose_name='Planlanan Teslim Tarihi')),
                ('actual_pickup_date', models.DateTimeField(blank=True, null=True, verbose_name='Gerçek Teslim Tarihi')),
                ('is_active', models.BooleanField(default=True, help_text='False ise teslim edilmiş demektir', verbose_name='Aktif')),
                ('storage_fee_monthly', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Aylık Depolama Ücreti')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notlar')),
                ('special_instructions', models.TextField(blank=True, help_text='Lastiklerin bakımı veya saklanması ile ilgili özel notlar', null=True, verbose_name='Özel Talimatlar')),
                ('has_photos', models.BooleanField(default=False, verbose_name='Fotoğraf Var')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stored_tires', to='customers.customer', verbose_name='Müşteri')),
            ],
            options={
                'verbose_name': 'Depolanan Lastik',
                'verbose_name_plural': 'Depolanan Lastikler',
                'ordering': ['-storage_date'],
            },
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['wholesaler', 'is_active'], name='customers_c_wholesa_c07f04_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['customer_type'], name='customers_c_custome_47da94_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['tire_hotel_enabled'], name='customers_c_tire_ho_d5b84f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customer',
            unique_together={('wholesaler', 'customer_code')},
        ),
        migrations.AddIndex(
            model_name='customervisit',
            index=models.Index(fields=['customer', 'visit_date'], name='customers_c_custome_c604eb_idx'),
        ),
        migrations.AddIndex(
            model_name='customervisit',
            index=models.Index(fields=['visit_type'], name='customers_c_visit_t_89f4b0_idx'),
        ),
        migrations.AddIndex(
            model_name='customervisit',
            index=models.Index(fields=['-visit_date'], name='customers_c_visit_d_2cbdfe_idx'),
        ),
        migrations.AddIndex(
            model_name='storedtire',
            index=models.Index(fields=['customer', 'is_active'], name='customers_s_custome_2df117_idx'),
        ),
        migrations.AddIndex(
            model_name='storedtire',
            index=models.Index(fields=['tire_season'], name='customers_s_tire_se_1d69a9_idx'),
        ),
        migrations.AddIndex(
            model_name='storedtire',
            index=models.Index(fields=['storage_date'], name='customers_s_storage_e8a5d5_idx'),
        ),
        migrations.AddIndex(
            model_name='storedtire',
            index=models.Index(fields=['planned_pickup_date'], name='customers_s_planned_5ccca7_idx'),
        ),
    ]
