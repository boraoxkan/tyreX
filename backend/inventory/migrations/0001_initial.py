# Generated by Django 5.2.4 on 2025-07-24 16:56

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0001_initial'),
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Depo Adı')),
                ('code', models.CharField(help_text='Benzersiz depo kodu (örn: IST001, ANK002)', max_length=20, unique=True, verbose_name='Depo Kodu')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Adres')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Şehir')),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True, verbose_name='Posta Kodu')),
                ('country', models.CharField(default='Türkiye', max_length=100, verbose_name='Ülke')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telefon')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-posta')),
                ('manager_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sorumlu Adı')),
                ('total_area', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Toplam Alan (m²)')),
                ('storage_capacity', models.PositiveIntegerField(blank=True, help_text='Maksimum ürün adedi', null=True, verbose_name='Depolama Kapasitesi')),
                ('warehouse_type', models.CharField(choices=[('main', 'Ana Depo'), ('distribution', 'Dağıtım Merkezi'), ('retail', 'Mağaza Deposu'), ('virtual', 'Sanal Depo'), ('consignment', 'Konsinye Depo')], default='main', max_length=20, verbose_name='Depo Türü')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif')),
                ('accepts_inbound', models.BooleanField(default=True, verbose_name='Giriş Kabul Eder')),
                ('accepts_outbound', models.BooleanField(default=True, verbose_name='Çıkış Kabul Eder')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='warehouses', to='companies.company', verbose_name='Şirket')),
            ],
            options={
                'verbose_name': 'Depo',
                'verbose_name_plural': 'Depolar',
                'ordering': ['company__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StockItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Mevcut Miktar')),
                ('reserved_quantity', models.PositiveIntegerField(default=0, help_text='Sipariş verilmiş ancak henüz sevk edilmemiş miktar', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Rezerve Miktar')),
                ('minimum_stock', models.PositiveIntegerField(default=0, help_text='Bu seviyenin altına düştüğünde uyarı verilir', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Stok')),
                ('maximum_stock', models.PositiveIntegerField(blank=True, help_text='Bu seviyenin üzerine çıkmaması önerilen miktar', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Maksimum Stok')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=4, help_text='Ürünün alış/maliyet fiyatı', max_digits=12, null=True, verbose_name='Maliyet Fiyatı')),
                ('sale_price', models.DecimalField(blank=True, decimal_places=4, help_text='Toptancı liste fiyatı', max_digits=12, null=True, verbose_name='Satış Fiyatı')),
                ('location_code', models.CharField(blank=True, help_text='Depo içindeki konum (Raf: A1-B2 gibi)', max_length=50, null=True, verbose_name='Lokasyon Kodu')),
                ('lot_number', models.CharField(blank=True, max_length=100, null=True, verbose_name='Lot/Parti Numarası')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='Son Kullanma Tarihi')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif')),
                ('is_sellable', models.BooleanField(default=True, help_text='False ise hasarlı/kusurlu ürün demektir', verbose_name='Satılabilir')),
                ('last_inbound_date', models.DateTimeField(blank=True, null=True, verbose_name='Son Giriş Tarihi')),
                ('last_outbound_date', models.DateTimeField(blank=True, null=True, verbose_name='Son Çıkış Tarihi')),
                ('last_count_date', models.DateTimeField(blank=True, null=True, verbose_name='Son Sayım Tarihi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_items', to='products.product', verbose_name='Ürün')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_items', to='inventory.warehouse', verbose_name='Depo')),
            ],
            options={
                'verbose_name': 'Stok Kalemi',
                'verbose_name_plural': 'Stok Kalemleri',
                'ordering': ['warehouse__name', 'product__name'],
                'indexes': [models.Index(fields=['product', 'warehouse'], name='inventory_s_product_e2964c_idx'), models.Index(fields=['warehouse', 'quantity'], name='inventory_s_warehou_f597d1_idx'), models.Index(fields=['expiry_date'], name='inventory_s_expiry__0ff1af_idx')],
                'unique_together': {('product', 'warehouse', 'lot_number')},
            },
        ),
    ]
