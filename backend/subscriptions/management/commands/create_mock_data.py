from django.core.management.base import BaseCommand
from django.db import transaction
from decimal import Decimal
import random
from datetime import datetime, timedelta

from products.models import Category, Attribute, Product, ProductAttributeValue
from companies.models import Company
from customers.models import Customer, StoredTire, CustomerVisit
from inventory.models import Warehouse, StockItem


class Command(BaseCommand):
    help = 'Mock data olu≈üturur (kategoriler, √ºr√ºnler, m√º≈üteriler, stok vb.)'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS("üì¶ Mock data olu≈üturuluyor..."))
        
        with transaction.atomic():
            self.create_categories()
            self.create_attributes() 
            self.create_products()
            self.create_customers()
            self.create_warehouses()
            self.create_stock_items()
            
        self.stdout.write(self.style.SUCCESS("‚úÖ Mock data ba≈üarƒ±yla olu≈üturuldu!"))

    def create_categories(self):
        """Lastik kategorilerini olu≈ütur"""
        self.stdout.write("üìÅ Kategoriler olu≈üturuluyor...")
        
        categories_data = [
            {
                'name': 'Binek Ara√ß Lastikleri',
                'description': 'Otomobil ve hafif ticari ara√ßlar i√ßin lastikler',
                'parent': None
            },
            {
                'name': 'Yaz Lastikleri',
                'description': 'Yaz ko≈üullarƒ± i√ßin optimize edilmi≈ü lastikler',
                'parent': 'Binek Ara√ß Lastikleri'
            },
            {
                'name': 'Kƒ±≈ü Lastikleri', 
                'description': 'Kar ve buzlu yollarda g√ºvenli s√ºr√º≈ü',
                'parent': 'Binek Ara√ß Lastikleri'
            },
            {
                'name': '4 Mevsim Lastikleri',
                'description': 'T√ºm mevsim ko≈üullarƒ±na uygun lastikler',
                'parent': 'Binek Ara√ß Lastikleri'
            },
            {
                'name': 'Kamyon Lastikleri',
                'description': 'Aƒüƒ±r vasƒ±ta ve kamyon lastikleri',
                'parent': None
            },
            {
                'name': 'Motosiklet Lastikleri',
                'description': 'Motosiklet ve scooter lastikleri',
                'parent': None
            }
        ]
        
        created_categories = {}
        for cat_data in categories_data:
            parent_obj = None
            if cat_data['parent']:
                parent_obj = created_categories.get(cat_data['parent'])
            
            category, created = Category.objects.get_or_create(
                name=cat_data['name'],
                defaults={
                    'description': cat_data['description'],
                    'parent': parent_obj,
                    'is_active': True
                }
            )
            created_categories[cat_data['name']] = category
            if created:
                self.stdout.write(f"  ‚úÖ {category.name}")

    def create_attributes(self):
        """Lastik √∂zelliklerini olu≈ütur"""
        self.stdout.write("üè∑Ô∏è √ñzellikler olu≈üturuluyor...")
        
        attributes_data = [
            {'name': 'Geni≈ülik', 'attribute_type': 'number', 'unit': 'mm'},
            {'name': 'Profil', 'attribute_type': 'number', 'unit': '%'},
            {'name': '√áap', 'attribute_type': 'number', 'unit': 'inch'},
            {'name': 'Hƒ±z ƒ∞ndeksi', 'attribute_type': 'text', 'unit': ''},
            {'name': 'Y√ºk ƒ∞ndeksi', 'attribute_type': 'number', 'unit': ''},
            {'name': 'Marka', 'attribute_type': 'text', 'unit': ''},
            {'name': 'Model', 'attribute_type': 'text', 'unit': ''},
            {'name': 'DOT Kodu', 'attribute_type': 'text', 'unit': ''},
            {'name': '√úretim Tarihi', 'attribute_type': 'text', 'unit': ''},
            {'name': 'Fuel Efficiency', 'attribute_type': 'text', 'unit': ''},
            {'name': 'Wet Grip', 'attribute_type': 'text', 'unit': ''},
            {'name': 'Noise Level', 'attribute_type': 'number', 'unit': 'dB'}
        ]
        
        for attr_data in attributes_data:
            attribute, created = Attribute.objects.get_or_create(
                name=attr_data['name'],
                defaults={
                    'attribute_type': attr_data['attribute_type'],
                    'unit': attr_data['unit'],
                    'is_required': attr_data['name'] in ['Geni≈ülik', 'Profil', '√áap', 'Marka']
                }
            )
            if created:
                self.stdout.write(f"  ‚úÖ {attribute.name}")

    def create_products(self):
        """Lastik √ºr√ºnlerini olu≈ütur"""
        self.stdout.write("üöó √úr√ºnler olu≈üturuluyor...")
        
        # Ana kategorileri al
        binek_category = Category.objects.get(name='Binek Ara√ß Lastikleri')
        yaz_category = Category.objects.get(name='Yaz Lastikleri')
        kis_category = Category.objects.get(name='Kƒ±≈ü Lastikleri')
        
        # √ñzellikler
        genislik_attr = Attribute.objects.get(name='Geni≈ülik')
        profil_attr = Attribute.objects.get(name='Profil')
        cap_attr = Attribute.objects.get(name='√áap')
        marka_attr = Attribute.objects.get(name='Marka')
        model_attr = Attribute.objects.get(name='Model')
        hiz_attr = Attribute.objects.get(name='Hƒ±z ƒ∞ndeksi')
        yuk_attr = Attribute.objects.get(name='Y√ºk ƒ∞ndeksi')
        
        # Lastik boyutlarƒ± ve markalar
        tire_sizes = [
            (195, 65, 15), (205, 55, 16), (215, 60, 16), (225, 45, 17),
            (235, 40, 18), (245, 35, 19), (255, 30, 20), (185, 60, 15),
            (175, 70, 14), (165, 80, 13)
        ]
        
        brands = ['Michelin', 'Bridgestone', 'Continental', 'Goodyear', 'Pirelli', 'Dunlop', 'Yokohama', 'Hankook', 'Toyo', 'Kumho']
        speed_indexes = ['H', 'V', 'W', 'Y', 'Z']
        
        products_created = 0
        for brand in brands[:6]:  # ƒ∞lk 6 marka
            for i, (width, profile, diameter) in enumerate(tire_sizes[:8]):  # ƒ∞lk 8 boyut
                # Yaz lastiƒüi
                yaz_product_name = f"{brand} {width}/{profile}R{diameter} Yaz Lastiƒüi"
                yaz_product, created = Product.objects.get_or_create(
                    name=yaz_product_name,
                    defaults={
                        'description': f"{brand} markalƒ± {width}/{profile}R{diameter} boyutunda yaz lastiƒüi. M√ºkemmel yol tutu≈üu ve uzun √∂m√ºr.",
                        'main_category': yaz_category,
                        'price': Decimal(str(random.randint(800, 2500))),
                        'is_active': True,
                        'weight': Decimal(str(random.randint(8, 15))),
                        'dimensions': f"{width}x{profile}x{diameter}"
                    }
                )
                
                if created:
                    # Ana kategoriyi ekle
                    yaz_product.additional_categories.add(binek_category)
                    
                    # √ñzellikleri ekle
                    ProductAttributeValue.objects.create(product=yaz_product, attribute=genislik_attr, value=str(width))
                    ProductAttributeValue.objects.create(product=yaz_product, attribute=profil_attr, value=str(profile))
                    ProductAttributeValue.objects.create(product=yaz_product, attribute=cap_attr, value=str(diameter))
                    ProductAttributeValue.objects.create(product=yaz_product, attribute=marka_attr, value=brand)
                    ProductAttributeValue.objects.create(product=yaz_product, attribute=model_attr, value=f"Summer Pro {i+1}")
                    ProductAttributeValue.objects.create(product=yaz_product, attribute=hiz_attr, value=random.choice(speed_indexes))
                    ProductAttributeValue.objects.create(product=yaz_product, attribute=yuk_attr, value=str(random.randint(82, 94)))
                    
                    products_created += 1
                
                # Kƒ±≈ü lastiƒüi
                if i < 5:  # Sadece 5 kƒ±≈ü lastiƒüi
                    kis_product_name = f"{brand} {width}/{profile}R{diameter} Kƒ±≈ü Lastiƒüi"
                    kis_product, created = Product.objects.get_or_create(
                        name=kis_product_name,
                        defaults={
                            'description': f"{brand} markalƒ± {width}/{profile}R{diameter} boyutunda kƒ±≈ü lastiƒüi. Kar ve buzda √ºst√ºn performans.",
                            'main_category': kis_category,
                            'price': Decimal(str(random.randint(900, 2800))),
                            'is_active': True,
                            'weight': Decimal(str(random.randint(8, 15))),
                            'dimensions': f"{width}x{profile}x{diameter}"
                        }
                    )
                    
                    if created:
                        kis_product.additional_categories.add(binek_category)
                        
                        ProductAttributeValue.objects.create(product=kis_product, attribute=genislik_attr, value=str(width))
                        ProductAttributeValue.objects.create(product=kis_product, attribute=profil_attr, value=str(profile))
                        ProductAttributeValue.objects.create(product=kis_product, attribute=cap_attr, value=str(diameter))
                        ProductAttributeValue.objects.create(product=kis_product, attribute=marka_attr, value=brand)
                        ProductAttributeValue.objects.create(product=kis_product, attribute=model_attr, value=f"Winter Max {i+1}")
                        ProductAttributeValue.objects.create(product=kis_product, attribute=hiz_attr, value=random.choice(speed_indexes))
                        ProductAttributeValue.objects.create(product=kis_product, attribute=yuk_attr, value=str(random.randint(82, 94)))
                        
                        products_created += 1
        
        self.stdout.write(f"  ‚úÖ {products_created} √ºr√ºn olu≈üturuldu")

    def create_customers(self):
        """Demo m√º≈üteriler olu≈ütur"""
        self.stdout.write("üë• M√º≈üteriler olu≈üturuluyor...")
        
        # Toptancƒ± ≈üirket (PRO pakete sahip)
        wholesaler_company = Company.objects.get(name='Hƒ±zlƒ± Lastik Ltd')
        
        customers_data = [
            {
                'first_name': 'Ay≈üe', 'last_name': 'Demir', 'phone': '+90 532 123 4567',
                'email': 'ayse.demir@gmail.com', 'address': '√áankaya, Ankara',
                'vehicle_info': '2018 Volkswagen Golf - 34 ABC 123'
            },
            {
                'first_name': 'Mehmet', 'last_name': 'Kaya', 'phone': '+90 533 234 5678', 
                'email': 'mehmet.kaya@hotmail.com', 'address': 'Ke√ßi√∂ren, Ankara',
                'vehicle_info': '2020 Toyota Corolla - 06 DEF 456'
            },
            {
                'first_name': 'Fatma', 'last_name': '√ñzkan', 'phone': '+90 534 345 6789',
                'email': 'fatma.ozkan@yahoo.com', 'address': 'Mamak, Ankara', 
                'vehicle_info': '2017 Renault Clio - 06 GHI 789'
            },
            {
                'first_name': 'Ali', 'last_name': 'Yƒ±lmaz', 'phone': '+90 535 456 7890',
                'email': 'ali.yilmaz@gmail.com', 'address': 'Yenimahalle, Ankara',
                'vehicle_info': '2019 Ford Focus - 06 JKL 012'
            },
            {
                'first_name': 'Zeynep', 'last_name': '√áelik', 'phone': '+90 536 567 8901',
                'email': 'zeynep.celik@hotmail.com', 'address': 'Etimesgut, Ankara',
                'vehicle_info': '2021 Hyundai i20 - 06 MNO 345'
            }
        ]
        
        for customer_data in customers_data:
            customer, created = Customer.objects.get_or_create(
                email=customer_data['email'],
                defaults={
                    'company': wholesaler_company,
                    'first_name': customer_data['first_name'],
                    'last_name': customer_data['last_name'],
                    'phone': customer_data['phone'],
                    'address': customer_data['address'],
                    'vehicle_info': customer_data['vehicle_info'],
                    'is_active': True
                }
            )
            
            if created:
                self.stdout.write(f"  ‚úÖ {customer.get_full_name()}")
                
                # M√º≈üteri ziyaretleri olu≈ütur
                for i in range(random.randint(1, 4)):
                    visit_date = datetime.now() - timedelta(days=random.randint(1, 180))
                    CustomerVisit.objects.create(
                        customer=customer,
                        visit_date=visit_date,
                        notes=f"M√º≈üteri {random.choice(['lastik kontrol√º', 'balans ayarƒ±', 'lastik deƒüi≈üimi', 'genel kontrol'])} i√ßin geldi."
                    )
                
                # Saklanan lastikler olu≈ütur
                if random.choice([True, False, False]):  # %33 ihtimalle
                    stored_tires_count = random.randint(1, 2)
                    for j in range(stored_tires_count):
                        brand = random.choice(['Michelin', 'Bridgestone', 'Continental'])
                        size = random.choice(['195/65R15', '205/55R16', '215/60R16'])
                        StoredTire.objects.create(
                            customer=customer,
                            brand=brand,
                            size=size,
                            quantity=4,
                            storage_date=datetime.now() - timedelta(days=random.randint(30, 365)),
                            notes=f"{brand} {size} takƒ±m lastik - {random.choice(['Yaz', 'Kƒ±≈ü'])} lastiƒüi"
                        )

    def create_warehouses(self):
        """Demo depolar olu≈ütur"""
        self.stdout.write("üè™ Depolar olu≈üturuluyor...")
        
        ultra_company = Company.objects.get(name='Premium Lastik A≈û')
        pro_company = Company.objects.get(name='Hƒ±zlƒ± Lastik Ltd')
        
        warehouses_data = [
            {
                'company': ultra_company,
                'name': 'Ana Depo ƒ∞stanbul',
                'address': 'ƒ∞stanbul Ticaret Merkezi, Beyoƒülu/ƒ∞stanbul',
                'capacity': 5000
            },
            {
                'company': ultra_company, 
                'name': '≈ûube Depo Kadƒ±k√∂y',
                'address': 'Kadƒ±k√∂y Lastik Merkezi, Kadƒ±k√∂y/ƒ∞stanbul',
                'capacity': 2000
            },
            {
                'company': pro_company,
                'name': 'Merkez Depo Ankara',
                'address': 'Ankara Sanayi Sitesi, √áankaya/Ankara', 
                'capacity': 1500
            }
        ]
        
        for warehouse_data in warehouses_data:
            warehouse, created = Warehouse.objects.get_or_create(
                name=warehouse_data['name'],
                company=warehouse_data['company'],
                defaults={
                    'address': warehouse_data['address'],
                    'capacity': warehouse_data['capacity'],
                    'is_active': True
                }
            )
            if created:
                self.stdout.write(f"  ‚úÖ {warehouse.name}")

    def create_stock_items(self):
        """Stok kalemleri olu≈ütur"""
        self.stdout.write("üì¶ Stok kalemleri olu≈üturuluyor...")
        
        warehouses = Warehouse.objects.all()
        products = Product.objects.all()[:20]  # ƒ∞lk 20 √ºr√ºn
        
        items_created = 0
        for warehouse in warehouses:
            # Her depoda rastgele √ºr√ºnler stokla
            warehouse_products = random.sample(list(products), min(12, len(products)))
            
            for product in warehouse_products:
                stock_item, created = StockItem.objects.get_or_create(
                    warehouse=warehouse,
                    product=product,
                    defaults={
                        'quantity': random.randint(20, 200),
                        'reserved_quantity': random.randint(0, 10),
                        'reorder_level': random.randint(10, 50),
                        'location': f"Raf-{random.randint(1, 20)}-{chr(65 + random.randint(0, 7))}"
                    }
                )
                if created:
                    items_created += 1
        
        self.stdout.write(f"  ‚úÖ {items_created} stok kalemi olu≈üturuldu")